import React from "react";
export * from './foobar.ts';
export { bar } from './foobar.ts';
foo = () => { ... }
export const j1 = 10, f1 = () => { ... }
export var a = 10
let a1, b1, c1 = 10
var e2 = 20, f
(function(a) {
  // foobar
}(10));
export function fn(a: number): number { ... }
export type Foo = {
  z: number;
};
const a = async (b: str) => { ... }
// Hello World
export class Test extends Foo {
  value: number = 0
  foo = () => { ... }
  async method(b: str): void { ... }
}
interface LabeledValue {
  label: string
}
abstract class Base {
  abstract getName(): string
  printName() { ... }
}
type Point = {
  x: number;
  y: number;
};
enum Direction {
  Up = 1
  Down
  Left
  Right
}
const CONST = 42
let z = "foobar"
export {z};
namespace Validation {
  export interface StringValidator {
    isAcceptable(s: string): boolean;
  }
  const lettersRegexp = /^[A-Za-z]+$/;
  const numberRegexp = /^[0-9]+$/;
  const fn = () => {
    alert("yes");
  };
}
window.onload = () => { ... }
const Foo = class {
  bar() { ... }
}
function identity<Type>(arg: Type): Type { ... }
let myIdentity: <Type>(arg: Type) => Type = identity
interface GenericIdentityFn {
  <Type>(arg: Type): Type
}
class GenericNumber<NumType> {
  zeroValue: NumType
  add: (x: NumType, y: NumType) => NumType
}
export default function MyApp() { ... }
const circle = require('./circle.js')
exports.area = (r) => { ... }
{
  function test() {
    console.log("yes");
  }
  "test"
}
(
  "text"
)
